{"version":3,"file":"static/js/357.663a21fc.chunk.js","mappings":"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","sources":["components/templates/ViewTemplate.js"],"sourcesContent":["import React, {\r\n    useState,\r\n    useRef,\r\n    useEffect,\r\n    useMemo,\r\n    useCallback,\r\n  } from \"react\";\r\n  import GitModal from \"../utils/GitModal/GitModal\";\r\n  import TemplateModal from \"../utils/TemplateModal/TemplateModal\";\r\n  import { MdDriveFileRenameOutline } from \"react-icons/md\";\r\n  import { Switch } from \"@chakra-ui/react\";\r\n  import ButtonPanel from \"../utils/ButtonPanel/ButtonPanel\";\r\n  import { FormControl } from \"@chakra-ui/react\";\r\n  import { ChevronRightIcon, ChevronLeftIcon } from \"@chakra-ui/icons\";\r\n  import ReactDom from \"react-dom\";\r\n  import { useSelector, useDispatch } from \"react-redux\";\r\n  import { useParams, useLocation } from \"react-router-dom\";\r\n  import { actions, updateTemplateCurrentName } from \"../utils/dataCenter\";\r\n  import DatalistInput from \"react-datalist-input\";\r\n  import EditTables from \"../tables/editTables\";\r\n  import { Alert, AlertIcon } from \"@chakra-ui/react\";\r\n  import { FormLabel } from \"@chakra-ui/react\";\r\n  import { Input, useToast } from \"@chakra-ui/react\";\r\n  import {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n  } from \"@chakra-ui/react\";\r\n  import { Button } from \"@chakra-ui/react\";\r\n  import { useDisclosure } from \"@chakra-ui/react\";\r\n  import EditCustomTable from \"../tables/EditCustomTable\";\r\n  import \"reactflow/dist/style.css\";\r\n  import ReactFlow, {\r\n    updateEdge,\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    ReactFlowProvider,\r\n    addEdge,\r\n    useNodesState,\r\n    useEdgesState,\r\n  } from \"reactflow\";\r\n  import CustomDataListInput from \"../utils/CustomDataList/CustomDataListInput\";\r\n  import \"../utils/SideBar/dnd.css\";\r\n  import ContextMenu from \"../utils/ContextMenu/contextMenu\";\r\n  import {\r\n    Drawer,\r\n    DrawerBody,\r\n    DrawerFooter,\r\n    DrawerHeader,\r\n    DrawerOverlay,\r\n    DrawerContent,\r\n    DrawerCloseButton,\r\n  } from \"@chakra-ui/react\";\r\n  import useResourceNode from \"../hooks/useResourceNode\";\r\n  import AxiosInstance from \"../utils/AxiosInstance\";\r\n  import {\r\n    updateTemplateName,\r\n    updateTemplateDesc,\r\n    clearTemplateDataState,\r\n    updateTemplateSavedStatus,\r\n    updateRegion,\r\n    initTableData,\r\n  } from \"../utils/dataCenter\";\r\n  \r\n  function ViewTemplate(props) {\r\n    let temp = useRef(0);\r\n    const params = useParams();\r\n    window.onbeforeunload = function () {\r\n      return \"Data will be lost if you leave the page, are you sure?\";\r\n    };\r\n  \r\n    const initialRenderRef = useRef(false);\r\n    const hidding = useSelector((state) => state.datacenter.hiding);\r\n    const initialRef = React.useRef(null);\r\n    const finalRef = React.useRef(null);\r\n  \r\n    const toast = useToast();\r\n    const {\r\n      isOpen: saveasIsOpen,\r\n      onOpen: saveasOnOpen,\r\n      onClose: saveasOnClose,\r\n    } = useDisclosure();\r\n    const {\r\n      isOpen: variableIsOpen,\r\n      onOpen: VariableOnOpen,\r\n      onClose: variableOnClose,\r\n    } = useDisclosure();\r\n  \r\n    const {\r\n      isOpen: isTemplateModalOpen,\r\n      onOpen: onTemplateModalOpen,\r\n      onClose: onTemplateModalClose,\r\n    } = useDisclosure();\r\n    const [variblesExistance, setVariablesExistance] = useState();\r\n  \r\n    const [exception, setException] = useState(\"\");\r\n    const [isException, setExceptionStatus] = useState(false);\r\n    const {\r\n      isOpen: isDrawerOpen,\r\n      onOpen: onDrawerOpen,\r\n      onClose: onDrawerClose,\r\n    } = useDisclosure();\r\n  \r\n    const {\r\n      isOpen: isGitModalOpen,\r\n      onOpen: onGitModalOpen,\r\n      onClose: onGitModalClose,\r\n    } = useDisclosure();\r\n  \r\n    const btnRef = React.useRef();\r\n    const [iteration, setIteration] = useState(0);\r\n    const [provid, setProvid] = useState(\"\");\r\n    const [modul, setModul] = useState(\"\");\r\n    const [resour, setResour] = useState(\"\");\r\n    const [obj, setObj] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n  \r\n    const [executingTemplate, setExecuting] = useState(false);\r\n    const body = useSelector((state) => state.datacenter.data);\r\n    const importent = useSelector((state) => state.datacenter.important);\r\n    const tables = useSelector((state) => state.datacenter.resourse);\r\n    const attr_data = useSelector((state) => state.datacenter.attributes);\r\n    const edit_data = useSelector((state) => state.datacenter.editData);\r\n    const custom_code_tables = useSelector(\r\n      (state) => state.datacenter.editCustomData\r\n    );\r\n    const editorStatus = useSelector(\r\n      (state) => state.datacenter.customCodeResourceStatus\r\n    );\r\n    const custom = useSelector((state) => state.datacenter.customCodeData);\r\n    const resourceNodes = useSelector((state) => state.datacenter.resourceNodes);\r\n    const moduleNodes = useSelector((state) => state.datacenter.moduleNodes);\r\n    const curr_node_data = useSelector(\r\n      (state) => state.datacenter.currentNodeActive\r\n    );\r\n    const selectedNode = useSelector((state) => state.datacenter.selectedNode);\r\n    const template_name = useSelector(\r\n      (state) => state.templateDataSlice.template_name\r\n    );\r\n    const language_option = useSelector(\r\n      (state) => state.templateDataSlice.language\r\n    );\r\n  \r\n    const region_option = useSelector(\r\n      (state) => state.templateDataSlice.region\r\n    );\r\n  \r\n  \r\n    const template_desc = useSelector(\r\n      (state) => state.templateDataSlice.template_desc\r\n    );\r\n    const dispatch = useDispatch();\r\n  \r\n    const [loading, setLoading] = useState(false);\r\n    const [providerNames, setProviders] = useState([]);\r\n    const [modulesNames, setModules] = useState([]);\r\n    const [typeNames, setTypenames] = useState([]);\r\n    const [resourcesNames, setResourses] = useState([]);\r\n    const [selectTemplate, setTemplate] = useState(false);\r\n    const [selectProvider, setProvider] = useState(false);\r\n    const [selectModule, setModule] = useState(false);\r\n    const [selectObject, setObject] = useState(false);\r\n    const [selectType, setTypes] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(false);\r\n    const [isValidTemplate, setTemplateValid] = useState(false);\r\n    const [isValidProject, setProjectValid] = useState(false);\r\n    const [isValidRole, setRoleValid] = useState(false);\r\n    const [isValidObject, setObjectValid] = useState(false);\r\n    const [isAccessTokenValid, setAccessTokenValid] = useState(false);\r\n    const [isRepoNameValid, setRepoNameValid] = useState(false);\r\n    const [isMessagevalid, setMessageValid] = useState(false);\r\n    const [objectExist, setObjectExist] = useState(false);\r\n    const [checkin, setCheckIn] = useState(false);\r\n    const [fieldsCheck, setFiedlsCheck] = useState(false);\r\n    const [saved, setSaved] = useState(false);\r\n    const [checked, setChecked] = useState(false);\r\n    const [isExistingTemplate, setExistingTemplate] = useState(false);\r\n    const [isBranchValid, setBranchValid] = useState(false);\r\n    const template = useRef();\r\n    const templateDescription = useRef();\r\n    const project_name = useRef();\r\n    const role_name = useRef();\r\n    const object = useRef();\r\n    const accessToken = useRef();\r\n    const repoName = useRef();\r\n    const message = useRef();\r\n    const branch = useRef();\r\n    const save_template_name = useRef();\r\n    const [argumentData, setArgumentData] = useState();\r\n    const [attributeData, setAttributeData] = useState();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [deleteTemplate, setDeleteTemplate] = useState(\"\");\r\n    const [executeTemplate, setExecutingTemplateName] = useState(\"\");\r\n    const [modalData, setModalData] = useState();\r\n    const [variableArguments, setVariableArguments] = useState([]);\r\n    const itemsRef = useRef([]);\r\n    const [region, setRegion] = useState(\"\");\r\n    const [regionNames, setRegionName] = useState([]);\r\n    const [is_aws, setIsAws] = useState(false);\r\n    const [isTemplatePanelOpen, setTemplatePanelOpen] = useState(true);\r\n    const [customModuleSwitch, setCustomModuleSwitch] = useState(false);\r\n    const [customModule, setCustomModule] = useState(\"\");\r\n    const [customModules, setCustomModules] = useState([]);\r\n  \r\n    const location = useLocation();\r\n    const { state } = location;\r\n    const { project } = state;\r\n  \r\n    const {\r\n      reactFlowWrapper,\r\n      nodes,\r\n      setNodes,\r\n      edges,\r\n      setEdges,\r\n      reactFlowInstance,\r\n      setReactFlowInstance,\r\n      nodeData,\r\n      setNodeData,\r\n      isDeleteOpen,\r\n      setIsOpen,\r\n      position,\r\n      setPosition,\r\n      nodeDisplay,\r\n      setNodeDisplay,\r\n      currNodeSelected,\r\n      setCurrNodeSelected,\r\n      onConnect,\r\n      handleMouseEnter,\r\n      deleteNode,\r\n      onDragOver,\r\n      onNodeClick,\r\n      onContextMenu,\r\n      onEdgeUpdate,\r\n      addNode,\r\n      onNodesChange,\r\n      onEdgesChange,\r\n      onDrop,\r\n      onNodeDrag,\r\n    } = useResourceNode();\r\n  \r\n    const chooseRegions = () => {\r\n      const regions = [\r\n        \"us-east-2\",\r\n        \"us-east-1\",\r\n        \"us-west-1\",\r\n        \"us-west-2\",\r\n        \"af-south-1\",\r\n        \"ap-east-1\",\r\n        \"ap-southeast-3\",\r\n        \"ap-south-1\",\r\n        \"ap-northeast-3\",\r\n        \"ap-northeast-2\",\r\n        \"ap-southeast-1\",\r\n        \"ap-southeast-2\",\r\n        \"ap-northeast-1\",\r\n        \"ca-central-1\",\r\n        \"eu-central-1\",\r\n        \"eu-west-1\",\r\n        \"eu-west-2\",\r\n        \"eu-south-1\",\r\n        \"eu-west-3\",\r\n        \"eu-north-1\",\r\n        \"me-south-1\",\r\n        \"sa-east-1\",\r\n        \"us-gov-east-1\",\r\n        \"us-gov-west-1\",\r\n      ];\r\n      let region_list = [];\r\n      for (const ele of regions) {\r\n        region_list.push({ id: ele, value: ele });\r\n      }\r\n      setRegionName(region_list);\r\n    };\r\n  \r\n    const setProviderValue = (value) => {\r\n      console.log(value, \"value\");\r\n      if (value == \"aws\") {\r\n        setIsAws(true);\r\n      } else {\r\n        setIsAws(false);\r\n      }\r\n    };\r\n  \r\n    const toggleDrawer = () => setTemplatePanelOpen(!isTemplatePanelOpen);\r\n  \r\n    const createWorkflow = () => {\r\n      console.log(\"WOrk flow\");\r\n    };\r\n  \r\n    async function addModules(module_name) {\r\n      dispatch(actions.addToModuleNodes(module_name));\r\n    }\r\n  \r\n    const fetchCustomModules = async () => {\r\n      const modules_response_data = await AxiosInstance.get(\"/listModules\");\r\n  \r\n      const modules = modules_response_data.data;\r\n  \r\n      const display_modules_list = modules.map((ele) => {\r\n        return { id: ele.module_name, value: ele.module_name };\r\n      });\r\n  \r\n      setCustomModules(display_modules_list);\r\n    };\r\n  \r\n    const removeCustomModules = () => {\r\n      dispatch(actions.clearState());\r\n  \r\n      setNodes([]);\r\n      setEdges([]);\r\n    };\r\n  \r\n    function is_variable(argument_name, obj_name, is_child) {\r\n      if (!is_child) {\r\n        for (const hide_ele in hidding) {\r\n          if (hidding[hide_ele][\"object_name\"] == obj_name) {\r\n            for (const argument in hidding[hide_ele][\"Arguments\"]) {\r\n              if (typeof hidding[hide_ele][\"Arguments\"][argument] == \"boolean\") {\r\n                if (argument == argument_name) {\r\n                  if (hidding[hide_ele][\"Arguments\"][argument_name] == true) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (const hide_ele in hidding) {\r\n          if (hidding[hide_ele][\"object_name\"] == obj_name) {\r\n            for (const argument in hidding[hide_ele][\"Arguments\"]) {\r\n              if (typeof hidding[hide_ele][\"Arguments\"][argument] != \"boolean\") {\r\n                for (const sub_attr in hidding[hide_ele][\"Arguments\"][argument]) {\r\n                  if (sub_attr == argument_name) {\r\n                    if (\r\n                      hidding[hide_ele][\"Arguments\"][argument][sub_attr] == true\r\n                    ) {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    function find_in_attributes(name) {\r\n      for (let index = 0; index < attributeData[0].length; index++) {\r\n        if (name == attributeData[0][index][\"Attribute_Name\"]) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    async function checkingin() {\r\n      const response = await fetch(\r\n        \"https://yop1tosnw2.execute-http://localhost:5000.us-east-1.amazonaws.com/default/terraform_template\",\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            id: \"validate\",\r\n            AccessToken: accessToken.current.value,\r\n            repo: repoName.current.value,\r\n            Message: message.current.value,\r\n            branch: branch.current.value,\r\n            filename: template_name,\r\n            edit: \"yes\",\r\n            provider: provid.toLowerCase(),\r\n          }),\r\n        }\r\n      );\r\n      if (response.status == 200) {\r\n        const data = response.data;\r\n        setChecked(true);\r\n      } else {\r\n        const data = response.data;\r\n        if (data.message == undefined) {\r\n          setException(data);\r\n        } else {\r\n          setException(data.message);\r\n        }\r\n        setExceptionStatus(true);\r\n      }\r\n    }\r\n  \r\n    const getEditedCustomResources = () => {\r\n      const elements = [];\r\n      for (const i of editorStatus) {\r\n        let flag = false;\r\n        for (const ele of body) {\r\n          if (ele.object_name === i.object_name) {\r\n            flag = true;\r\n          }\r\n        }\r\n        if (!flag) {\r\n          elements.push(i.object_name);\r\n        }\r\n      }\r\n      const ele_objects = elements.map((ele) => {\r\n        const customDataCall = getEditedCustomData(ele);\r\n        return {\r\n          resource: customDataCall[\"resource\"],\r\n          object_name: ele,\r\n          custom_code: customDataCall[\"custom_code\"],\r\n        };\r\n      });\r\n      return ele_objects;\r\n    };\r\n  \r\n    const hasCustomCode = (obj) => {\r\n      for (const i of editorStatus) {\r\n        if (i.object_name === obj) {\r\n          return i.status;\r\n        }\r\n      }\r\n    };\r\n  \r\n    const handleWorkflowClick = () => {\r\n      setNodeDisplay(false);\r\n      setCurrNodeSelected(\"\");\r\n    };\r\n  \r\n    const getEditedCustomData = (obj) => {\r\n      for (const i of custom_code_tables) {\r\n        if (i.object_name === obj) {\r\n          return i;\r\n        }\r\n      }\r\n    };\r\n  \r\n    const getCustomData = (obj) => {\r\n      for (const i of custom) {\r\n        if (i.object_name === obj) {\r\n          return i;\r\n        }\r\n      }\r\n    };\r\n  \r\n    async function selectingArguments(template_name){\r\n      let flag = 0;\r\n      let valueBody = [];\r\n      const edited_resources = getEditedCustomResources();\r\n      const custom_code_arr = [...edited_resources];\r\n  \r\n      const modulesList = moduleNodes.map((ele) => ele.id);\r\n  \r\n      console.log(selectVariables());\r\n      if (selectVariables().length != 0) {\r\n        setVariablesExistance(true);\r\n        const variable_arguments = selectVariables();\r\n        setVariableArguments(variable_arguments);\r\n      } else {\r\n        setVariablesExistance(false);\r\n        setVariableArguments({});\r\n      }\r\n      console.log(\"Body New \", body, importent);\r\n      for (let a = 0; a < body.length; a++) {\r\n        if (hasCustomCode(body[a][\"object_name\"])) {\r\n          continue;\r\n        }\r\n  \r\n        for (const b in importent[a][\"Arguments\"]) {\r\n          if (importent[a][\"Arguments\"][b] == \"\") {\r\n            if (body[a][\"Arguments\"][b].value == \"\") {\r\n              flag = 1;\r\n              break;\r\n            }\r\n          } else {\r\n            for (const c in importent[a][\"Arguments\"][b]) {\r\n              if (body[a][\"Arguments\"][b][c].value != undefined) {\r\n                if (body[a][\"Arguments\"][b][c].value == \"\") {\r\n                  flag = 1;\r\n                  break;\r\n                }\r\n              } else {\r\n                console.log(\"Undefined\", body[a][\"Arguments\"][b][c].value);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (flag == 0) {\r\n        selectVariables();\r\n        console.log(\"body\", body);\r\n  \r\n        for (const a of body) {\r\n          if (hasCustomCode(a[\"object_name\"])) {\r\n            const customDataCall = getCustomData(a[\"object_name\"]);\r\n  \r\n            const custom_args = {\r\n              resource: customDataCall[\"resource\"],\r\n              object_name: a[\"object_name\"],\r\n              custom_code: customDataCall[\"custom_code\"],\r\n            };\r\n            custom_code_arr.push(custom_args);\r\n            continue;\r\n          }\r\n  \r\n          valueBody.push({\r\n            module: a[\"module\"],\r\n            resource: a[\"resource\"],\r\n            object_name: a[\"object_name\"],\r\n            Resource_Type: a[\"Resource_type\"],\r\n            Arguments: {},\r\n            Attributes:\r\n              attr_data[a[\"object_name\"]] != undefined\r\n                ? attr_data[a[\"object_name\"]]\r\n                : [],\r\n          });\r\n  \r\n          if (\r\n            Object.keys(a[\"Arguments\"]).length === 0 &&\r\n            edit_data[a[\"object_name\"]]\r\n          ) {\r\n            console.log(\"Found empty args\")\r\n            for(let ele of valueBody){\r\n              if (ele.object_name === a[\"object_name\"]){\r\n                ele.Arguments = edit_data[a[\"object_name\"]]\r\n              }\r\n            }\r\n            \r\n          }\r\n          for (const b in a[\"Arguments\"]) {\r\n            if (a[\"Arguments\"][b].value != undefined) {\r\n              if (a[\"Arguments\"][b].value != \"\") {\r\n                if (is_variable(b, a[\"object_name\"], false)) {\r\n                  let temp = {\r\n                    value: a[\"Arguments\"][b].value,\r\n                    is_variable: true,\r\n                  };\r\n                  const temp_valBody = valueBody.map((ele) => {\r\n                    if (ele.object_name === a[\"object_name\"])\r\n                      ele[\"Arguments\"][b] = temp;\r\n                    return ele;\r\n                  }, []);\r\n                } else {\r\n                  let temp1 = {\r\n                    value: a[\"Arguments\"][b].value,\r\n                    is_variable: false,\r\n                  };\r\n  \r\n                  const temp_valBody = valueBody.map((ele) => {\r\n                    if (ele.object_name === a[\"object_name\"])\r\n                      ele[\"Arguments\"][b] = temp1;\r\n                    return ele;\r\n                  }, []);\r\n                }\r\n              }\r\n            } else {\r\n              let valBody_obj = valueBody.filter((ele) => {\r\n                return ele.object_name === a[\"object_name\"];\r\n              }, {});\r\n  \r\n              valBody_obj = valBody_obj[0];\r\n              console.log(\"valBody_obj--->\", valBody_obj);\r\n  \r\n              valBody_obj[\"Arguments\"][b] = {};\r\n              for (const c in a[\"Arguments\"][b]) {\r\n                if (\r\n                  a[\"Arguments\"][b][c].value != undefined &&\r\n                  a[\"Arguments\"][b][c].value != \"\"\r\n                ) {\r\n                  let inner_flag = 0;\r\n                  for (let index = 0; index < argumentData.length; index++) {\r\n                    if (argumentData[index][\"Arguments_Name\"] == b) {\r\n                      valBody_obj[\"Arguments\"] = b;\r\n                      inner_flag = 1;\r\n                      break;\r\n                    }\r\n                  }\r\n                  if (!inner_flag) {\r\n                    let var_string = a[\"Arguments\"][b][c];\r\n                    if (var_string.value != \"\") {\r\n                      valBody_obj[\"Arguments\"][b][c] = var_string;\r\n                    }\r\n                    //valueBody[a][\"Arguments\"][b][c]=var_string\r\n                  }\r\n                  /*if(Object.keys(child_temp).length!=0){\r\n                                      valueBody[a][\"Arguments\"][b] = child_temp;\r\n                                  }*/\r\n                } else if (a[\"Arguments\"][b][c].value == undefined) {\r\n                  let temp_dict = {};\r\n                  for (const i in a[\"Arguments\"][b][c]) {\r\n                    if (\r\n                      i.value != undefined ||\r\n                      a[\"Arguments\"][b][c][i].value == \"\"\r\n                    ) {\r\n                      continue;\r\n                    } else {\r\n                      temp_dict[i] = a[\"Arguments\"][b][c][i];\r\n                    }\r\n                  }\r\n  \r\n                  if (Object.keys(temp_dict).length != 0) {\r\n                    valBody_obj[\"Arguments\"][b][c] = temp_dict;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(\"Edit template valuebody\", valueBody);\r\n  \r\n        const updated_nodes = [];\r\n        for (const i of nodes) {\r\n          for (const j of resourceNodes) {\r\n            if (i.id === j.id) {\r\n              updated_nodes.push({\r\n                ...j,\r\n                position: { x: i.position.x, y: i.position.y },\r\n              });\r\n            }\r\n          }\r\n        }\r\n  \r\n        console.log({\r\n          provider: provid.toLowerCase(),\r\n          template_name: template_name,\r\n          template_desc: template_desc, //templateDescription.current.value,\r\n          data: moduleNodes.length > 0 ? [] : valueBody,\r\n          language: language_option.toLowerCase(),\r\n          region: region_option,\r\n          custom: custom_code_arr.length !== 0 ? true : false,\r\n          custom_data: custom_code_arr,\r\n          nodes: updated_nodes,\r\n          edges: edges,\r\n          project: project,\r\n          modules_save: moduleNodes.length > 0 ? true : false,\r\n          modulesList: modulesList,\r\n        });\r\n  \r\n        const response = await AxiosInstance.post(\"/viewtemplate\", {\r\n          provider: provid.toLowerCase(),\r\n          template_name: template_name,\r\n          template_desc: template_desc, //templateDescription.current.value,\r\n          data: moduleNodes.length > 0 ? [] : valueBody,\r\n          language: language_option,\r\n          region: region_option,\r\n          custom: custom_code_arr.length !== 0 ? true : false,\r\n          custom_data: custom_code_arr,\r\n          nodes: updated_nodes,\r\n          edges: edges,\r\n          project: project,\r\n          modules_save: moduleNodes.length > 0 ? true : false,\r\n          modulesList: modulesList,\r\n        });\r\n  \r\n        if (response.status == 200) {\r\n          console.log(\"success\");\r\n          const data = response.data;\r\n          dispatch(updateTemplateSavedStatus(true));\r\n          toast({\r\n            title: \"Saved Successfully\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n            position: \"bottom-left\",\r\n          });\r\n        } else {\r\n          dispatch(updateTemplateSavedStatus(false));\r\n          const data = response.data;\r\n          console.log(data);\r\n          if (data == undefined) {\r\n            setException(data);\r\n            console.log(data);\r\n          } else {\r\n            console.log(data.message);\r\n            setException(data.message);\r\n          }\r\n          setExceptionStatus(true);\r\n        }\r\n      } else {\r\n        console.log(\"fail\");\r\n        setErrorMessage(true);\r\n      }\r\n    }\r\n  \r\n    async function selectingModule(e) {\r\n      setLoading(true);\r\n      const response = await AxiosInstance.post(\"/template\", {\r\n        id: \"module\",\r\n        provider: e.toLowerCase(),\r\n      });\r\n      const data = response.data;\r\n      const modulesList = [];\r\n      for (const a of data) {\r\n        modulesList.push({ id: a, value: a });\r\n      }\r\n      setModules(modulesList);\r\n      setLoading(false);\r\n      setResourses([]);\r\n      setModul(\"\");\r\n      setResour(\"\");\r\n    }\r\n    async function selectingResourses(e) {\r\n      setLoading(true);\r\n      const response = await AxiosInstance.post(\"/template\", {\r\n        id: \"resource\",\r\n        provider: provid.toLowerCase(),\r\n        type: e,\r\n        modulename: modul,\r\n      });\r\n  \r\n      const data = response.data;\r\n      const resoursesList = [];\r\n      for (const i of data) {\r\n        resoursesList.push({ id: i, value: i });\r\n      }\r\n      setResourses(resoursesList);\r\n      setLoading(false);\r\n      setResour(\"\");\r\n    }\r\n  \r\n    async function submitHandler(r, m, t, o, p) {\r\n      setLoading(true);\r\n      dispatch(actions.addNewResourceNode([o, o, r]));\r\n      dispatch(initTableData(o));\r\n      const arguments_response = await AxiosInstance.post(\"/template\", {\r\n        id: \"arguments\",\r\n        provider: p.toLowerCase(),\r\n        modulename: m,\r\n        type: t,\r\n        resourcename: r,\r\n      });\r\n  \r\n      const attributes_response = await AxiosInstance.post(\"/template\", {\r\n        id: \"attributes\",\r\n        provider: p.toLowerCase(),\r\n        modulename: m,\r\n        type: t,\r\n        resourcename: r,\r\n      });\r\n  \r\n      const attributes_data = attributes_response.data;\r\n      const arguments_data = arguments_response.data;\r\n  \r\n      setArgumentData(arguments_data);\r\n      setAttributeData(attributes_data);\r\n  \r\n      arguments_data[1] = r;\r\n      arguments_data[2] = o;\r\n      setLoading(false);\r\n      dispatch(actions.addingNew([m, r, o, t]));\r\n      dispatch(actions.createHide([m, r, o]));\r\n      dispatch(actions.addingImportantNew([m, r, o]));\r\n      dispatch(actions.createDeleteList(o));\r\n      dispatch(actions.createNewTableData(o));\r\n      dispatch(actions.createAttrDeleteList(o));\r\n      dispatch(\r\n        actions.addNewResourse([\r\n          temp.current,\r\n          [temp.current, arguments_data, true, attributes_data],\r\n        ])\r\n      );\r\n      temp.current = temp.current + 1;\r\n  \r\n      setProvid(p.toLowerCase());\r\n      setModul(\"\");\r\n      setResour(\"\");\r\n      setType(\"\");\r\n      setModules([]);\r\n      setProviders([]);\r\n      setTypenames([]);\r\n      setResourses([]);\r\n      selectingModule(p);\r\n    }\r\n  \r\n    async function templateValidation() {\r\n      const name = template_name;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setTemplateValid(true);\r\n      } else {\r\n        setTemplateValid(false);\r\n        const response = await AxiosInstance.post(\"/validation\", {\r\n          template_name: template_name,\r\n        });\r\n        const data = response.data;\r\n        console.log(\"Data----------->\", data);\r\n        if (data == \"Failed\") {\r\n          setExistingTemplate(true);\r\n        } else {\r\n          setExistingTemplate(false);\r\n        }\r\n      }\r\n    }\r\n  \r\n    function projectValidation() {\r\n      const name = project_name.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setProjectValid(true);\r\n      } else {\r\n        setProjectValid(false);\r\n      }\r\n    }\r\n  \r\n    function roleValidation() {\r\n      const name = role_name.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setRoleValid(true);\r\n      } else {\r\n        setRoleValid(false);\r\n      }\r\n    }\r\n  \r\n    function clearObjName() {\r\n      object.current.value = \"\";\r\n    }\r\n  \r\n    function objectValidation() {\r\n      const name = object.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      let flag1 = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      for (const a of body) {\r\n        if (a[\"object_name\"] == name) {\r\n          flag1 = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag1 == 1) {\r\n        setObjectExist(true);\r\n      } else {\r\n        setObjectExist(false);\r\n      }\r\n      if (object.current.value == \"\") {\r\n        setProviders([]);\r\n      }\r\n  \r\n      if (flag != 0) {\r\n        setObjectValid(true);\r\n      } else {\r\n        setObjectValid(false);\r\n        setObj(object.current.value);\r\n        if (object.current.value != \"\") {\r\n          setProviders([\r\n            { id: \"AWS\", value: \"AWS\" },\r\n            { id: \"GCP\", value: \"GCP\" },\r\n            { id: \"AZURE\", value: \"Azure\" },\r\n            { id: \"SNOWFLAKE\", value: \"Snowflake\" },\r\n          ]);\r\n        }\r\n      }\r\n    }\r\n  \r\n    function accessTokenValidation() {\r\n      const name = accessToken.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setAccessTokenValid(true);\r\n      } else {\r\n        setAccessTokenValid(false);\r\n      }\r\n    }\r\n    function repoNameValidation() {\r\n      const name = repoName.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setRepoNameValid(true);\r\n      } else {\r\n        setRepoNameValid(false);\r\n      }\r\n    }\r\n    function branchValidation() {\r\n      const name = branch.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setBranchValid(true);\r\n      } else {\r\n        setBranchValid(false);\r\n      }\r\n    }\r\n    function messageValidation() {\r\n      const name = message.current.value;\r\n      const characters =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_,. \";\r\n      let flag = 0;\r\n      for (const a of name) {\r\n        if (!characters.includes(a)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag != 0) {\r\n        setMessageValid(true);\r\n      } else {\r\n        setMessageValid(false);\r\n      }\r\n    }\r\n  \r\n    const getSubArgumentValue = (\r\n      level_1_name,\r\n      argument_name,\r\n      child,\r\n      obj_name,\r\n      is_child\r\n    ) => {\r\n      for (const body_ele in body) {\r\n        if (body[body_ele][\"object_name\"] == obj_name) {\r\n          for (const argument in body[body_ele][\"Arguments\"]) {\r\n            if (argument == level_1_name) {\r\n              for (const arg in body[body_ele][\"Arguments\"][argument]) {\r\n                if (arg == argument_name) {\r\n                  return body[body_ele][\"Arguments\"][argument][arg][child].value;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  \r\n    const getArgumentValue = (argument_name, obj_name, is_child) => {\r\n      if (!is_child) {\r\n        for (const body_ele in body) {\r\n          if (body[body_ele][\"object_name\"] == obj_name) {\r\n            for (const argument in body[body_ele][\"Arguments\"]) {\r\n              if (argument == argument_name) {\r\n                return body[body_ele][\"Arguments\"][argument_name].value;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (const body_ele in body) {\r\n          if (body[body_ele][\"object_name\"] == obj_name) {\r\n            for (const argument in body[body_ele][\"Arguments\"]) {\r\n              for (const sub_attr in body[body_ele][\"Arguments\"][argument]) {\r\n                if (sub_attr == argument_name) {\r\n                  return body[body_ele][\"Arguments\"][argument][sub_attr].value;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  \r\n    const selectVariables = () => {\r\n      const variable_arguments = [];\r\n      console.log(hidding);\r\n      for (const i in hidding) {\r\n        console.log(hidding, hidding[i]);\r\n        for (const j in hidding[i][\"Arguments\"]) {\r\n          if (typeof hidding[i][\"Arguments\"][j] == \"boolean\") {\r\n            console.log(hidding, hidding[i]);\r\n            if (hidding[i][\"Arguments\"][j] == true) {\r\n              const value = getArgumentValue(j, hidding[i][\"object_name\"], false);\r\n              variable_arguments.push(value);\r\n            }\r\n          } else {\r\n            for (const child in hidding[i][\"Arguments\"][j]) {\r\n              if (typeof hidding[i][\"Arguments\"][j][child] == \"boolean\") {\r\n                if (hidding[i][\"Arguments\"][j][child] == true) {\r\n                  const value = getArgumentValue(\r\n                    child,\r\n                    hidding[i][\"object_name\"],\r\n                    true\r\n                  );\r\n                  variable_arguments.push(value);\r\n                }\r\n              } else {\r\n                for (const sub_child in hidding[i][\"Arguments\"][j][child]) {\r\n                  if (\r\n                    typeof hidding[i][\"Arguments\"][j][child][sub_child] ==\r\n                    \"boolean\"\r\n                  ) {\r\n                    if (hidding[i][\"Arguments\"][j][child][sub_child] == true) {\r\n                      const value = getSubArgumentValue(\r\n                        j,\r\n                        child,\r\n                        sub_child,\r\n                        hidding[i][\"object_name\"],\r\n                        true\r\n                      );\r\n                      variable_arguments.push(value);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return variable_arguments;\r\n    };\r\n  \r\n    async function executingscript(template_name) {\r\n      const temp_variables = handleVariableValues();\r\n      const response = await AxiosInstance.post(\"/script\", {\r\n        template_name: template_name,\r\n        variables: temp_variables,\r\n      });\r\n    }\r\n  \r\n    const handleVariableValues = () => {\r\n      const final_variables = {};\r\n  \r\n      let idx = 0;\r\n      for (const i of itemsRef.current) {\r\n        if (i != null) {\r\n          final_variables[variableArguments[idx++]] = i.value;\r\n        }\r\n      }\r\n      return final_variables;\r\n    };\r\n  \r\n    async function editingTemplate(e) {\r\n      const response = await AxiosInstance.post(\"/gettemplate\", {\r\n        template_name: e,\r\n      });\r\n  \r\n      const data = response.data;\r\n      console.log(\"edit data \", data);\r\n      if (data[0][\"custom_data\"]) {\r\n        console.log(\"Custom 1\");\r\n        for (const i of data[1][\"custom_data\"]) {\r\n          console.log(i);\r\n          dispatch(\r\n            actions.addCustomCodeForEdit([\r\n              i[\"object_name\"],\r\n              i[\"resource\"],\r\n              i[\"custom_code\"],\r\n            ])\r\n          );\r\n          dispatch(actions.modifyEditorStatus([i[\"object_name\"]]));\r\n        }\r\n      }\r\n  \r\n      dispatch(updateTemplateSavedStatus(true));\r\n      dispatch(updateTemplateName(data[0][\"template_name\"]));\r\n      dispatch(updateTemplateDesc(data[0][\"template_desc\"]));\r\n      setProvid(data[0][\"provider\"]);\r\n  \r\n      for (const i of data[0].nodes) {\r\n        //i.data.label = `${i.data.label} - ${i.id}`\r\n        console.log(\"node element\", i);\r\n        dispatch(\r\n          actions.addEditResourceNode([\r\n            i.id,\r\n            i.id,\r\n            i.data.label,\r\n            i.data.is_displayed,\r\n            i.position.x,\r\n            i.position.y,\r\n          ])\r\n        );\r\n      }\r\n  \r\n      setNodes(data[0].nodes);\r\n      setEdges(data[0].edges);\r\n      //\r\n      //dispatch(actions.updateResourceNode([o]))\r\n  \r\n      for (const a of data[0].data) {\r\n        const response = await AxiosInstance.post(\"/listtemplates\", {\r\n          project: project,\r\n        });\r\n        const data1 = response.data;\r\n  \r\n        for (const b of data1) {\r\n          if (e == b.template_name) {\r\n            dispatch(updateTemplateName(b.template_name));\r\n            dispatch(updateTemplateDesc(b.template_desc));\r\n            //template.current.value = b.template_name;\r\n            //templateDescription.current.value = b.template_desc;\r\n            submitHandler(\r\n              a.resource,\r\n              a.module,\r\n              a.Resource_Type,\r\n              a.object_name,\r\n              b.provider\r\n            );\r\n            dispatch(\r\n              actions.addtoEditData([a.object_name, a.Arguments, a.Attributes])\r\n            );\r\n            dispatch(actions.addToEditVariables([a.object_name, a.Variables]));\r\n            dispatch(actions.createAttrDeleteList(a.object_name));\r\n            for (const attr of a.Attributes) {\r\n              dispatch(actions.addNewAttribute([a.object_name, attr]));\r\n            }\r\n            setProvid(b.provider);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    if (iteration == 0) {\r\n      setIteration(iteration + 1);\r\n    }\r\n    useEffect(() => {\r\n      setTimeout(() => setExecuting(false), 3000);\r\n    }, [executingTemplate]);\r\n  \r\n    useEffect(() => {\r\n      setTimeout(() => setSaved(false), 3000);\r\n    }, [saved]);\r\n    useEffect(() => {\r\n      setTimeout(() => setChecked(false), 3000);\r\n    }, [checked]);\r\n  \r\n    useEffect(() => {\r\n      if (!initialRenderRef?.current) {\r\n        editingTemplate(params.name.slice(0));\r\n        initialRenderRef.current = true;\r\n        setIteration(2);\r\n      }\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      setNodes(resourceNodes);\r\n    }, [resourceNodes]);\r\n  \r\n    useEffect(() => {\r\n      setNodes(moduleNodes);\r\n    }, [moduleNodes]);\r\n  \r\n    useEffect(() => {\r\n      setTimeout(() => setExceptionStatus(false), 3000);\r\n    }, [isException]);\r\n    return (\r\n      <div class=\"wrapper\">\r\n        <GitModal isOpen={isGitModalOpen} onClose={onGitModalClose} />\r\n        <TemplateModal\r\n          isOpen={isTemplateModalOpen}\r\n          onClose={onTemplateModalClose}\r\n        />\r\n        <>\r\n          <Modal\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n            isOpen={variableIsOpen}\r\n            onClose={variableOnClose}\r\n          >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n              <ModalHeader>Enter Variable Values</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                {variblesExistance &&\r\n                  variableArguments.map((item, idx) => (\r\n                    <>\r\n                      <FormLabel>{item}</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        ref={(el) => (itemsRef.current[idx] = el)}\r\n                        placeholder=\"Enter Value\"\r\n                      />\r\n                    </>\r\n                  ))}\r\n              </ModalBody>\r\n  \r\n              <ModalFooter>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  mr={3}\r\n                  onClick={() => {\r\n                    handleVariableValues();\r\n                    setExecuting(true);\r\n                    executingscript(executeTemplate);\r\n                    onClose();\r\n                    variableOnClose();\r\n                    toast({\r\n                      title: \"Execution Successfull!\",\r\n                      status: \"success\",\r\n                      duration: 3000,\r\n                      isClosable: true,\r\n                      position: \"bottom-left\",\r\n                    });\r\n                  }}\r\n                >\r\n                  Execute\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    variableOnClose();\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n        <>\r\n          <Modal\r\n            initialFocusRef={initialRef}\r\n            finalFocusRef={finalRef}\r\n            isOpen={saveasIsOpen}\r\n            onClose={saveasOnClose}\r\n          >\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n              <ModalHeader>Save</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                <>\r\n                  <FormLabel>Template Name</FormLabel>\r\n                  <Input\r\n                    type=\"text\"\r\n                    ref={save_template_name}\r\n                    placeholder=\"Enter template name\"\r\n                  />\r\n                </>\r\n              </ModalBody>\r\n  \r\n              <ModalFooter>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  mr={3}\r\n                  onClick={() => {\r\n                    //dispatch(updateTemplateName(save_template_name.current.value))\r\n                    selectingArguments(save_template_name.current.value);\r\n                    saveasOnClose();\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    saveasOnClose();\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n  \r\n        <>\r\n          <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n              <ModalHeader>\r\n                {modalData == 0 && \"Delete Template\"}\r\n                {modalData == 1 && \"Execute Template\"}\r\n              </ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                {modalData == 0 &&\r\n                  \"Are you sure, you want to delete the template?\"}\r\n                {modalData == 1 &&\r\n                  \"Are you sure, you want to execute the template?\"}\r\n              </ModalBody>\r\n  \r\n              <ModalFooter>\r\n                <Button\r\n                  colorScheme={\r\n                    (modalData == 0 && \"red\") || (modalData == 1 && \"blue\")\r\n                  }\r\n                  mr={3}\r\n                  onClick={() => {\r\n                    if (modalData == 0) {\r\n                      onClose();\r\n                    } else {\r\n                      {\r\n                        if (variblesExistance) {\r\n                          VariableOnOpen();\r\n                        } else {\r\n                          setExecuting(true);\r\n                          executingscript(executeTemplate);\r\n                          toast({\r\n                            title: \"Execution Successfull!\",\r\n                            status: \"success\",\r\n                            duration: 3000,\r\n                            isClosable: true,\r\n                            position: \"bottom-left\",\r\n                          });\r\n                          onClose();\r\n                        }\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  {modalData == 0 && \"Delete\"}\r\n                  {modalData == 1 && \"Execute\"}\r\n                </Button>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n        <>\r\n          <Drawer\r\n            isOpen={isDrawerOpen}\r\n            placement=\"left\"\r\n            onClose={onDrawerClose}\r\n            finalFocusRef={btnRef}\r\n          >\r\n            <DrawerOverlay />\r\n            <DrawerContent>\r\n              <DrawerCloseButton />\r\n              <DrawerHeader>Create New Resource</DrawerHeader>\r\n  \r\n              <DrawerBody>\r\n                <div\r\n                  onClick={() => {\r\n                    if (template_name == \"\") {\r\n                      setTemplate(true);\r\n                    }\r\n                    setProvider(false);\r\n                  }}\r\n                >\r\n                  {selectTemplate && <p id=\"p1\">Please Enter Template Name</p>}\r\n                  <DatalistInput\r\n                    placeholder=\"Select Provider\"\r\n                    value={provid}\r\n                    setValue={setProvid}\r\n                    label=\"Provider *\"\r\n                    className=\"datalist\"\r\n                    onSelect={(item) => {\r\n                      if (provid == \"\") {\r\n                        selectingModule(item.value.toLowerCase());\r\n                        setProvid(item.value.toLowerCase());\r\n                        setProviderValue(item.value.toLowerCase());\r\n                      }\r\n                    }}\r\n                    onChange={() => {\r\n                      if (tables.length != 0) {\r\n                        setProvid(provid);\r\n                      }\r\n                    }}\r\n                    items={providerNames}\r\n                  />\r\n                </div>\r\n                <FormControl display=\"flex\" alignItems=\"center\">\r\n                  <FormLabel htmlFor=\"custom-modules\" mb=\"0\">\r\n                    Use Custom Modules?\r\n                  </FormLabel>\r\n                  <Switch\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        fetchCustomModules();\r\n                      } else {\r\n                        removeCustomModules();\r\n                      }\r\n                      setCustomModuleSwitch(!customModuleSwitch);\r\n                    }}\r\n                    id=\"custom-modules\"\r\n                  />\r\n                </FormControl>\r\n  \r\n                {customModuleSwitch && (\r\n                  <CustomDataListInput\r\n                    options={customModules}\r\n                    placeholder=\"Select Custom Module\"\r\n                    onSelect={(item) => {\r\n                      setCustomModule(item.toLowerCase());\r\n                      addModules(item);\r\n                    }}\r\n                  />\r\n                )}\r\n  \r\n                <div className=\"hide-divs\">\r\n                  {isValidProject && <p id=\"p1\">Don't Use Special Characters</p>}\r\n                  <label htmlFor=\"project\">Project</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    placeholder={\"Project Name\"}\r\n                    name=\"project\"\r\n                    onChange={projectValidation}\r\n                    ref={project_name}\r\n                  ></input>\r\n                </div>\r\n  \r\n                <div className=\"hide-divs\">\r\n                  {isValidRole && <p id=\"p1\">Don't Use Special Characters</p>}\r\n                  <label htmlFor=\"role\">Role Name</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    placeholder={\"Eg.Manager\"}\r\n                    name=\"role\"\r\n                    onChange={roleValidation}\r\n                    ref={role_name}\r\n                  ></input>\r\n                </div>\r\n  \r\n                <div\r\n                  onClick={() => {\r\n                    if (provid == \"\") {\r\n                      setProvider(true);\r\n                    }\r\n                    setModule(false);\r\n                  }}\r\n                >\r\n                  {selectProvider && <p id=\"p1\">Please Select Provider</p>}\r\n                  <DatalistInput\r\n                    placeholder=\"Select Module\"\r\n                    value={modul}\r\n                    setValue={setModul}\r\n                    label=\"Module *\"\r\n                    className=\"datalist\"\r\n                    onSelect={(item) => {\r\n                      setModul(item.value);\r\n                      setTypenames([\r\n                        { id: \"Resource\", value: \"Resource\" },\r\n                        { id: \"Data Source\", value: \"Data Source\" },\r\n                      ]);\r\n                    }}\r\n                    items={modulesNames}\r\n                  />\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    if (modul == \"\") {\r\n                      setModule(true);\r\n                    }\r\n                    setTypes(false);\r\n                  }}\r\n                >\r\n                  {selectModule && <p id=\"p1\">Please Select Module</p>}\r\n                  <DatalistInput\r\n                    placeholder=\"Select Type\"\r\n                    value={type}\r\n                    setValue={setType}\r\n                    label=\"Type *\"\r\n                    className=\"datalist\"\r\n                    onSelect={(item) => {\r\n                      setType(item.value);\r\n                      selectingResourses(item.value);\r\n                      chooseRegions();\r\n                    }}\r\n                    items={typeNames}\r\n                  />\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    if (template_name == \"\") {\r\n                      setObject(true);\r\n                    }\r\n                  }}\r\n                >\r\n                  {isValidObject && <p id=\"p1\">Don't Use Special Characters</p>}\r\n                  {selectObject && <p id=\"p1\">Please Enter Template Name</p>}\r\n                  {object == \"\" && (\r\n                    <p id=\"p1\">Object Name Null, Please fill it</p>\r\n                  )}\r\n                  {objectExist && (\r\n                    <p id=\"p1\">Object Name Already Exists, Please Try Another</p>\r\n                  )}\r\n                  <label htmlFor=\"objectName\">Service Name * </label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    placeholder={\"Object Name\"}\r\n                    name=\"objectName\"\r\n                    ref={object}\r\n                    onChange={() => {\r\n                      if (template_name == \"\") {\r\n                        object.current.value = \"\";\r\n                      } else {\r\n                        objectValidation();\r\n                      }\r\n                    }}\r\n                  ></input>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    if (type == \"\") {\r\n                      setTypes(true);\r\n                    }\r\n                  }}\r\n                >\r\n                  {selectType && <p>Please Select Type</p>}\r\n                  {is_aws && (\r\n                    <DatalistInput\r\n                      placeholder=\"Select Region1\"\r\n                      value={region}\r\n                      label=\"Region *\"\r\n                      setValue={setRegion}\r\n                      className=\"datalist\"\r\n                      onSelect={(item) => {\r\n                        //setRegion(item.value);\r\n                        dispatch(updateRegion(item.value));\r\n                      }}\r\n                      items={regionNames}\r\n                    />\r\n                  )}\r\n  \r\n                  <DatalistInput\r\n                    placeholder=\"Select Resourse\"\r\n                    value={resour}\r\n                    setValue={setResour}\r\n                    label=\"Resourse *\"\r\n                    className=\"datalist\"\r\n                    id=\"resourceList\"\r\n                    onSelect={(item) => {\r\n                      setResour(item.value);\r\n                    }}\r\n                    items={resourcesNames}\r\n                  />\r\n                </div>\r\n              </DrawerBody>\r\n  \r\n              <DrawerFooter>\r\n                <Button variant=\"outline\" mr={3} onClick={onDrawerClose}>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  onClick={() => {\r\n                    submitHandler(resour, modul, type, obj, provid);\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </DrawerFooter>\r\n            </DrawerContent>\r\n          </Drawer>\r\n        </>\r\n        {/* <div style={{ position: \"relative\", zIndex: 1000 }}>\r\n          <div\r\n            className=\"new-template-div\"\r\n            id=\"div2\"\r\n            style={{\r\n              zIndex: -1,\r\n              transition: \"all 0.5s\",\r\n              transform: isTemplatePanelOpen\r\n                ? \"translateX(0%)\"\r\n                : \"translateX(-100%)\",\r\n              width: isTemplatePanelOpen ? \"25%\" : \"0%\",\r\n            }}\r\n          >\r\n            <div id=\"upload-btn\">\r\n              {location.pathname != \"/templates/existingTemplate\" && (\r\n                <button>Upload</button>\r\n              )}\r\n            </div>\r\n  \r\n            <div\r\n              onClick={() => {\r\n                setTemplate(false);\r\n                setObject(false);\r\n                setTemplate(false);\r\n              }}\r\n            >\r\n              {isValidTemplate && <p id=\"p1\">Don't Use Special Characters</p>}\r\n              {isExistingTemplate && <p id=\"p1\">Template Name Already Exists</p>}\r\n              <label htmlFor=\"template\">Template Name * </label>\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Template Name\"}\r\n                name=\"template\"\r\n                onChange={templateValidation}\r\n                ref={template}\r\n              ></input>\r\n            </div>\r\n            <div>\r\n              <label>Template Description</label>\r\n              <textarea ref={templateDescription} rows={\"3\"}></textarea>\r\n            </div>\r\n  \r\n            <div\r\n              onClick={() => {\r\n                if (template.current.value == \"\") {\r\n                  setTemplate(true);\r\n                }\r\n                setProvider(false);\r\n              }}\r\n            >\r\n              {selectTemplate && <p id=\"p1\">Please Enter Template Name</p>}\r\n              <DatalistInput\r\n                placeholder=\"Select Provider\"\r\n                value={provid}\r\n                setValue={setProvid}\r\n                label=\"Provider *\"\r\n                className=\"datalist\"\r\n                onSelect={(item) => {\r\n                  if (provid == \"\") {\r\n                    selectingModule(item.value.toLowerCase());\r\n                    setProvid(item.value.toLowerCase());\r\n                    setProviderValue(item.value.toLowerCase());\r\n                  }\r\n                }}\r\n                onChange={() => {\r\n                  if (tables.length != 0) {\r\n                    setProvid(provid);\r\n                  }\r\n                }}\r\n                items={providerNames}\r\n              />\r\n            </div>\r\n            <FormControl display=\"flex\" alignItems=\"center\">\r\n              <FormLabel htmlFor=\"custom-modules\" mb=\"0\">\r\n                Use Custom Modules?\r\n              </FormLabel>\r\n              <Switch\r\n                onChange={(e) => {\r\n                  if (e.target.checked) {\r\n                    fetchCustomModules();\r\n                  } else {\r\n                    removeCustomModules();\r\n                  }\r\n                  setCustomModuleSwitch(!customModuleSwitch);\r\n                }}\r\n                id=\"custom-modules\"\r\n              />\r\n            </FormControl>\r\n  \r\n            {customModuleSwitch && (\r\n              <CustomDataListInput\r\n                options={customModules}\r\n                placeholder=\"Select Custom Module\"\r\n                onSelect={(item) => {\r\n                  setCustomModule(item.toLowerCase());\r\n                  addModules(item);\r\n                }}\r\n              />\r\n            )}\r\n  \r\n            {!customModuleSwitch && (\r\n              <button\r\n                ref={btnRef}\r\n                onClick={onDrawerOpen}\r\n                className=\"add-rsrc-btn\"\r\n              >\r\n                Add Resource\r\n              </button>\r\n            )}\r\n          </div>\r\n          <span\r\n            className=\"template_panel-controller-span\"\r\n            onClick={toggleDrawer}\r\n            style={{\r\n              transition: \"all 0.5s\",\r\n              transform: isTemplatePanelOpen\r\n                ? \"translateX(0%)\"\r\n                : \"translateX(-110%)\",\r\n              zIndex: 1,\r\n            }}\r\n          >\r\n            {isTemplatePanelOpen ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </span>\r\n        </div> */}\r\n        {/* <div className=\"new-template-div\" id=\"div2\">\r\n          <div id=\"upload-btn\">\r\n            location.pathname!='/templates/existingTemplate'&&<button>Upload</button>\r\n          </div>\r\n  \r\n          <div\r\n            onClick={() => {\r\n              setTemplate(false);\r\n              setObject(false);\r\n              setTemplate(false);\r\n            }}\r\n          >\r\n            {isValidTemplate && <p id=\"p1\">Don't Use Special Characters</p>}\r\n            {isExistingTemplate && <p id=\"p1\">Template Name Already Exists</p>}\r\n            <label htmlFor=\"template\">Template Name * </label>\r\n            <input\r\n              type={\"text\"}\r\n              placeholder={\"Template Name\"}\r\n              name=\"template\"\r\n              onChange={templateValidation}\r\n              ref={template}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label>Template Description</label>\r\n            <textarea ref={templateDescription} rows={\"3\"}></textarea>\r\n          </div>\r\n          <div className=\"hide-divs\">\r\n            {isValidProject && <p id=\"p1\">Don't Use Special Characters</p>}\r\n            <label htmlFor=\"project\">Project</label>\r\n            <input\r\n              type={\"text\"}\r\n              placeholder={\"Eg.My Project\"}\r\n              name=\"project\"\r\n              onChange={projectValidation}\r\n              ref={project_name}\r\n            ></input>\r\n          </div>\r\n          <div className=\"hide-divs\">\r\n            {isValidRole && <p id=\"p1\">Don't Use Special Characters</p>}\r\n            <label htmlFor=\"role\">Role Name</label>\r\n            <input\r\n              type={\"text\"}\r\n              placeholder={\"Eg.Manager\"}\r\n              name=\"role\"\r\n              onChange={roleValidation}\r\n              ref={role_name}\r\n            ></input>\r\n          </div>\r\n  \r\n          <div\r\n            onClick={() => {\r\n              if (template.current.value == \"\") {\r\n                setTemplate(true);\r\n              }\r\n              setProvider(false);\r\n            }}\r\n          >\r\n            {selectTemplate && <p id=\"p1\">Please Enter Template Name</p>}\r\n            <DatalistInput\r\n              placeholder=\"Select Provider\"\r\n              value={provid.toUpperCase()}\r\n              setValue={setProvid}\r\n              label=\"Provider *\"\r\n              className=\"datalist\"\r\n              onSelect={(item) => {\r\n                if (provid == \"\") {\r\n                  selectingModule(item.value.toLowerCase());\r\n                  setProvid(item.value);\r\n                }\r\n              }}\r\n              onChange={() => {\r\n                if (tables.length != 0) {\r\n                  setProvid(provid);\r\n                }\r\n              }}\r\n              items={providerNames}\r\n            />\r\n          </div>\r\n  \r\n          <button ref={btnRef} onClick={onDrawerOpen} className=\"add-rsrc-btn\">\r\n            Add Resource\r\n          </button>\r\n        </div> */}\r\n  \r\n        <div id=\"div3\">\r\n          {loading && <div class=\"loader\"></div>}\r\n          {saved && (\r\n            <Alert status=\"success\">\r\n              <AlertIcon />\r\n              Saved Successfully\r\n            </Alert>\r\n          )}\r\n          {errorMessage && (\r\n            <Alert status=\"error\">\r\n              <AlertIcon />\r\n              Please fill all required fields!\r\n            </Alert>\r\n          )}\r\n  \r\n          {loading && <div class=\"loader\"></div>}\r\n          {/* <div\r\n            className=\"options-panel-element\"\r\n            style={{\r\n              width: \"max-content\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              fontSize: \"18px\",\r\n              margin: \"0px 20px\",\r\n              position: \"absolute\",\r\n              background: \"white !important\",\r\n              zIndex: 100,\r\n            }}\r\n            onClick={onTemplateModalOpen}\r\n          >\r\n            <span style={{ fontSize: \"13px\", marginRight: \"3px\" }}>\r\n              {template_name}\r\n            </span>\r\n            <MdDriveFileRenameOutline />\r\n          </div> */}\r\n  \r\n          <div\r\n            id=\"div4\"\r\n            onClick={() => {\r\n              setErrorMessage(false);\r\n            }}\r\n          >\r\n            {nodeDisplay && (\r\n              <button\r\n                style={{\r\n                  background: \"#5e5ee4\",\r\n                  color: \"white\",\r\n                  padding: \"10px\",\r\n                  borderRadius: \"5px\",\r\n                  marginTop: \"50px\",\r\n                }}\r\n                onClick={handleWorkflowClick}\r\n              >\r\n                <i class=\"fa-solid fa-arrow-left\"></i> Workflow\r\n              </button>\r\n            )}\r\n  \r\n            {!nodeDisplay && (\r\n              <div className=\"dndflow\">\r\n                <ReactFlowProvider>\r\n                  <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                    <ReactFlow\r\n                      nodes={nodes}\r\n                      edges={edges}\r\n                      onNodesChange={onNodesChange}\r\n                      onEdgesChange={onEdgesChange}\r\n                      onConnect={onConnect}\r\n                      onInit={setReactFlowInstance}\r\n                      onDrop={onDrop}\r\n                      onNodeMouseEnter={handleMouseEnter}\r\n                      onDragOver={onDragOver}\r\n                      onNodeContextMenu={onContextMenu}\r\n                      onNodeClick={onNodeClick}\r\n                      onEdgeUpdate={onEdgeUpdate}\r\n                      onNodeDrag={onNodeDrag}\r\n                      fitView={false}\r\n                    >\r\n                      <ContextMenu\r\n                        isOpen={isDeleteOpen}\r\n                        onMouseLeave={() => setIsOpen(false)}\r\n                        position={position}\r\n                        actions={[\r\n                          { label: \"delete\", effect: deleteNode },\r\n                          {\r\n                            label: \"Edit Resource\",\r\n                            effect: () => console.log(\"none\"),\r\n                          },\r\n                        ]}\r\n                      />\r\n  \r\n                      <Background />\r\n                      <Controls />\r\n                    </ReactFlow>\r\n                  </div>\r\n                </ReactFlowProvider>\r\n              </div>\r\n            )}\r\n  \r\n            {nodeDisplay &&\r\n              curr_node_data.map((data) => (\r\n                <EditTables\r\n                  key={data[1][1]}\r\n                  id={data[0]}\r\n                  data={data[1]}\r\n                  output_data={data[3]}\r\n                />\r\n              ))}\r\n  \r\n            {console.log(custom_code_tables, selectedNode)}\r\n            {nodeDisplay &&\r\n              custom_code_tables.map((data) =>\r\n                selectedNode === data.object_name ? (\r\n                  <EditCustomTable\r\n                    key={data[\"object_name\"]}\r\n                    object_name={data[\"object_name\"]}\r\n                    resource={data[\"resource\"]}\r\n                  />\r\n                ) : null\r\n              )}\r\n          </div>\r\n          {checked && <p>Checked</p>}\r\n          {isException && <p>{exception}</p>}\r\n  \r\n          {/* <ButtonPanel\r\n            onClick={() => console.log(\"kk\")}\r\n            saveClick={() => selectingArguments(template_name)}\r\n            saveAsClick={() => saveasOnOpen()}\r\n            addResourceClick={onDrawerOpen}\r\n            gitClick={() => {\r\n              onGitModalOpen();\r\n            }}\r\n            executeClick={() => {\r\n              {\r\n                {\r\n                  if (variblesExistance) {\r\n                    VariableOnOpen();\r\n                  } else {\r\n                    onOpen();\r\n                  }\r\n                  setExecutingTemplateName(template_name);\r\n  \r\n                  setModalData(1);\r\n                }\r\n              }\r\n            }}\r\n            style={{ marginLeft: \"40% !important\" }}\r\n          /> */}\r\n  \r\n          {checkin &&\r\n            ReactDom.createPortal(\r\n              <div\r\n                id=\"backdrop\"\r\n                onClick={() => {\r\n                  setCheckIn(false);\r\n                }}\r\n              />,\r\n              document.getElementById(\"root2\")\r\n            )}\r\n          {checkin &&\r\n            ReactDom.createPortal(\r\n              <div id=\"confirmForm\">\r\n                <h4>Git Check-In</h4>\r\n                <div>\r\n                  {isAccessTokenValid && (\r\n                    <p id=\"p1\">Please Enter Valid Access Token</p>\r\n                  )}\r\n                  <label htmlFor=\"token\">Access Token *</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    name=\"token\"\r\n                    placeholder=\"Enter Access Token\"\r\n                    ref={accessToken}\r\n                    onChange={accessTokenValidation}\r\n                  ></input>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    setFiedlsCheck(false);\r\n                  }}\r\n                >\r\n                  {isRepoNameValid && <p id=\"p1\">Please Enter Valid Repo Name</p>}\r\n                  <label htmlFor=\"refoname\">Repo Name *</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    name=\"refoname\"\r\n                    placeholder=\"Enter Repo Name\"\r\n                    ref={repoName}\r\n                    onChange={repoNameValidation}\r\n                  ></input>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    setFiedlsCheck(false);\r\n                  }}\r\n                >\r\n                  {isBranchValid && <p id=\"p1\">Please Enter Valid Branch</p>}\r\n                  <label htmlFor=\"branch\">Branch *</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    name=\"branch\"\r\n                    placeholder=\"Enter Branch\"\r\n                    ref={branch}\r\n                    onChange={branchValidation}\r\n                  ></input>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    setFiedlsCheck(false);\r\n                  }}\r\n                >\r\n                  {isMessagevalid && <p id=\"p1\">Please Enter Valid Message</p>}\r\n                  <label htmlFor=\"message\">Message</label>\r\n                  <input\r\n                    type={\"text\"}\r\n                    name=\"message\"\r\n                    placeholder=\"Enter Message\"\r\n                    ref={message}\r\n                    onChange={messageValidation}\r\n                  ></input>\r\n                </div>\r\n                {fieldsCheck && <p id=\"p1\">Please Fill All Required Fields(*)</p>}\r\n                <button\r\n                  onClick={() => {\r\n                    setCheckIn(false);\r\n                  }}\r\n                >\r\n                  cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    if (\r\n                      accessToken.current.value != \"\" &&\r\n                      repoName.current.value != \"\"\r\n                    ) {\r\n                      setCheckIn(false);\r\n                      checkingin();\r\n                    } else setFiedlsCheck(true);\r\n                  }}\r\n                >\r\n                  checkIn\r\n                </button>\r\n              </div>,\r\n              document.getElementById(\"root3\")\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  export default React.memo(ViewTemplate);\r\n  "],"names":["ViewTemplate","props","temp","useRef","params","useParams","window","onbeforeunload","initialRenderRef","hidding","useSelector","state","datacenter","hiding","initialRef","React","finalRef","toast","useToast","_useDisclosure","useDisclosure","saveasIsOpen","isOpen","saveasOnClose","onOpen","onClose","_useDisclosure2","variableIsOpen","VariableOnOpen","variableOnClose","_useDisclosure3","isTemplateModalOpen","onTemplateModalClose","_useState","useState","_useState2","_slicedToArray","variblesExistance","setVariablesExistance","_useState3","_useState4","exception","setException","_useState5","_useState6","isException","setExceptionStatus","_useDisclosure4","isDrawerOpen","onDrawerClose","_useDisclosure5","isGitModalOpen","onGitModalClose","btnRef","_useState7","_useState8","iteration","setIteration","_useState9","_useState10","provid","setProvid","_useState11","_useState12","modul","setModul","_useState13","_useState14","resour","setResour","_useState15","_useState16","obj","setObj","_useState17","_useState18","type","setType","_useState19","_useState20","executingTemplate","setExecuting","body","data","importent","important","tables","resourse","attr_data","attributes","edit_data","editData","custom_code_tables","editCustomData","editorStatus","customCodeResourceStatus","custom","customCodeData","resourceNodes","moduleNodes","curr_node_data","currentNodeActive","selectedNode","template_name","templateDataSlice","language_option","language","region_option","region","template_desc","dispatch","useDispatch","_useState21","_useState22","loading","setLoading","_useState23","_useState24","providerNames","setProviders","_useState25","_useState26","modulesNames","setModules","_useState27","_useState28","typeNames","setTypenames","_useState29","_useState30","resourcesNames","setResourses","_useState31","_useState32","selectTemplate","setTemplate","_useState33","_useState34","selectProvider","setProvider","_useState35","_useState36","selectModule","setModule","_useState37","_useState38","selectObject","setObject","_useState39","_useState40","selectType","setTypes","_useState41","_useState42","errorMessage","setErrorMessage","_useState43","_useState44","_useState45","_useState46","isValidProject","setProjectValid","_useState47","_useState48","isValidRole","setRoleValid","_useState49","_useState50","isValidObject","setObjectValid","_useState51","_useState52","isAccessTokenValid","setAccessTokenValid","_useState53","_useState54","isRepoNameValid","setRepoNameValid","_useState55","_useState56","isMessagevalid","setMessageValid","_useState57","_useState58","objectExist","setObjectExist","_useState59","_useState60","checkin","setCheckIn","_useState61","_useState62","fieldsCheck","setFiedlsCheck","_useState63","_useState64","saved","setSaved","_useState65","_useState66","checked","setChecked","_useState67","_useState68","_useState69","_useState70","isBranchValid","setBranchValid","project_name","role_name","object","accessToken","repoName","message","branch","save_template_name","_useState71","_useState72","argumentData","setArgumentData","_useState73","_useState74","setAttributeData","_useDisclosure6","_useState75","_useState76","_useState77","_useState78","executeTemplate","_useState79","_useState80","modalData","_useState81","_useState82","variableArguments","setVariableArguments","itemsRef","_useState83","_useState84","setRegion","_useState85","_useState86","regionNames","setRegionName","_useState87","_useState88","is_aws","setIsAws","_useState89","_useState90","_useState91","_useState92","customModuleSwitch","setCustomModuleSwitch","_useState93","_useState94","setCustomModule","_useState95","_useState96","customModules","setCustomModules","project","useLocation","_useResourceNode","useResourceNode","reactFlowWrapper","nodes","setNodes","edges","setEdges","setReactFlowInstance","reactFlowInstance","isDeleteOpen","nodeData","setNodeData","setIsOpen","position","nodeDisplay","setPosition","setNodeDisplay","setCurrNodeSelected","currNodeSelected","onConnect","handleMouseEnter","deleteNode","onDragOver","onNodeClick","onContextMenu","onEdgeUpdate","onNodesChange","addNode","onEdgesChange","onDrop","onNodeDrag","_addModules","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","module_name","wrap","_context2","prev","next","actions","addToModuleNodes","stop","apply","arguments","fetchCustomModules","_ref","_callee","modules_response_data","modules","display_modules_list","_context","AxiosInstance","get","sent","map","ele","id","value","is_variable","argument_name","obj_name","is_child","hide_ele","argument","sub_attr","_checkingin","_callee3","response","_data","_context3","fetch","method","JSON","stringify","AccessToken","current","repo","Message","filename","edit","provider","toLowerCase","status","undefined","getEditedCustomResources","_step","elements","_iterator","_createForOfIteratorHelper","s","n","done","_step2","i","flag","_iterator2","object_name","err","e","f","push","ele_objects","customDataCall","getEditedCustomData","resource","custom_code","hasCustomCode","_step3","_iterator3","_step4","_iterator4","getCustomData","_step5","_iterator5","_selectingArguments","_callee4","valueBody","edited_resources","custom_code_arr","modulesList","variable_arguments","a","b","c","_iterator15","_step15","_loop","updated_nodes","_iterator16","_step16","_iterator18","_step18","j","_data2","_context6","_toConsumableArray","console","log","selectVariables","length","abrupt","t0","keys","t1","t2","t3","custom_args","_iterator17","_step17","_loop2","_b","_context5","module","Resource_Type","Arguments","Attributes","Object","_temp","temp1","valBody_obj","_c","inner_flag","index","var_string","temp_dict","_context4","filter","delegateYield","t4","t5","finish","_objectSpread","x","y","custom_data","modules_save","post","updateTemplateSavedStatus","title","duration","isClosable","selectingModule","_x3","_selectingModule","_callee5","_iterator19","_step19","_context7","_selectingResourses","_callee6","resoursesList","_iterator20","_step20","_context8","modulename","submitHandler","_x5","_x6","_x7","_x8","_x9","_submitHandler","_callee7","r","m","t","o","p","arguments_response","attributes_response","attributes_data","arguments_data","_context9","addNewResourceNode","initTableData","resourcename","addingNew","createHide","addingImportantNew","createDeleteList","createNewTableData","createAttrDeleteList","addNewResourse","getSubArgumentValue","level_1_name","child","body_ele","arg","getArgumentValue","sub_child","executingscript","_x10","_executingscript","_callee9","temp_variables","_context11","handleVariableValues","variables","_step14","final_variables","idx","_iterator14","_editingTemplate","_callee10","_iterator22","_step22","_iterator23","_step23","_i2","_iterator24","_step24","_response","data1","_iterator25","_step25","_iterator26","_step26","attr","_context12","addCustomCodeForEdit","modifyEditorStatus","updateTemplateName","updateTemplateDesc","addEditResourceNode","label","is_displayed","addtoEditData","addToEditVariables","Variables","addNewAttribute","useEffect","setTimeout","_x11","editingTemplate","name","slice","_jsxs","class","children","_jsx","GitModal","TemplateModal","_Fragment","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","item","FormLabel","Input","ref","el","placeholder","ModalFooter","Button","colorScheme","mr","onClick","_x2","selectingArguments","closeOnOverlayClick","Drawer","placement","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","DatalistInput","setValue","className","onSelect","onChange","items","FormControl","display","alignItems","htmlFor","mb","Switch","target","clearState","CustomDataListInput","options","_x","addModules","_step6","_iterator6","includes","_step7","_iterator7","_x4","selectingResourses","region_list","_i","_regions","chooseRegions","_step8","flag1","_iterator8","_step9","_iterator9","objectValidation","updateRegion","DrawerFooter","variant","Alert","AlertIcon","style","background","color","padding","borderRadius","marginTop","ReactFlowProvider","ReactFlow","onInit","onNodeMouseEnter","onNodeContextMenu","fitView","ContextMenu","onMouseLeave","effect","Background","Controls","EditTables","output_data","EditCustomTable","ReactDom","document","getElementById","_step10","_iterator10","_step11","_iterator11","_step12","_iterator12","_step13","_iterator13","checkingin"],"sourceRoot":""}